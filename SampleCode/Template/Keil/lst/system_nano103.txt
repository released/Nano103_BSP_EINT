; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\system_nano103.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\system_nano103.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Nano103\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\system_nano103.crf ..\..\..\Library\Device\Nuvoton\Nano103\Source\system_Nano103.c]
                          THUMB

                          AREA ||i.SysGet_HCLKFreq||, CODE, READONLY, ALIGN=2

                  SysGet_HCLKFreq PROC
;;;76       */
;;;77     uint32_t SysGet_HCLKFreq(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79     
;;;80         uint32_t u32Freqout, u32AHBDivider, u32ClkSel;
;;;81     
;;;82         u32ClkSel = CLK->CLKSEL0 & CLK_CLKSEL0_HCLKSEL_Msk;
000002  4c14              LDR      r4,|L1.84|
000004  6920              LDR      r0,[r4,#0x10]
000006  0741              LSLS     r1,r0,#29
;;;83     
;;;84         if (u32ClkSel == CLK_CLKSEL0_HCLKSEL_HXT)    /* external HXT crystal clock */
;;;85         {
;;;86             u32Freqout = __HXT;
000008  4813              LDR      r0,|L1.88|
00000a  0f49              LSRS     r1,r1,#29             ;82
00000c  d008              BEQ      |L1.32|
;;;87         }
;;;88         else if(u32ClkSel == CLK_CLKSEL0_HCLKSEL_LXT)               /* external LXT crystal clock */
00000e  2901              CMP      r1,#1
000010  d00d              BEQ      |L1.46|
;;;89         {
;;;90             u32Freqout = __LXT;
;;;91         }
;;;92         else if(u32ClkSel == CLK_CLKSEL0_HCLKSEL_PLL)               /* PLL clock */
000012  2902              CMP      r1,#2
000014  d00e              BEQ      |L1.52|
;;;93         {
;;;94             u32Freqout = SysGet_PLLClockFreq();
;;;95         }
;;;96         else if(u32ClkSel == CLK_CLKSEL0_HCLKSEL_LIRC)              /* internal LIRC oscillator clock */
000016  2903              CMP      r1,#3
000018  d00f              BEQ      |L1.58|
;;;97         {
;;;98             u32Freqout = __LIRC;
;;;99         }
;;;100        else if(u32ClkSel == CLK_CLKSEL0_HCLKSEL_HIRC)              /* internal HIRC oscillator clock */
00001a  2904              CMP      r1,#4
00001c  d00f              BEQ      |L1.62|
;;;101        {
;;;102            /* HIRC Source Selection */
;;;103            if(CLK->CLKSEL0 & CLK_CLKSEL0_HIRCSEL_Msk)
;;;104            {
;;;105                /* Clock source from HIRC1 (36MHz) */
;;;106                u32Freqout =__HIRC36M;
;;;107            }
;;;108            else
;;;109            {
;;;110                /* Clock source from HIRC0 (12MHz) */
;;;111                if((CLK->PWRCTL & CLK_PWRCTL_HIRC0FSEL_Msk) == CLK_PWRCTL_HIRC0FSEL_Msk)
;;;112                    u32Freqout =__HIRC16M;
;;;113                else
;;;114                    u32Freqout =__HIRC12M;
;;;115            }
;;;116        }
;;;117        else            /* internal MIRC oscillator clock */
;;;118        {
;;;119            u32Freqout = __MIRC;
00001e  480f              LDR      r0,|L1.92|
                  |L1.32|
;;;120        }
;;;121        u32AHBDivider = (CLK->CLKDIV0 & CLK_CLKDIV0_HCLKDIV_Msk) + 1 ;
000020  69e1              LDR      r1,[r4,#0x1c]
000022  0709              LSLS     r1,r1,#28
000024  0f09              LSRS     r1,r1,#28
000026  1c49              ADDS     r1,r1,#1
;;;122        return (u32Freqout/u32AHBDivider);
000028  f7fffffe          BL       __aeabi_uidivmod
;;;123    }
00002c  bd10              POP      {r4,pc}
                  |L1.46|
00002e  2001              MOVS     r0,#1                 ;90
000030  03c0              LSLS     r0,r0,#15             ;90
000032  e7f5              B        |L1.32|
                  |L1.52|
000034  f7fffffe          BL       SysGet_PLLClockFreq
000038  e7f2              B        |L1.32|
                  |L1.58|
00003a  4809              LDR      r0,|L1.96|
00003c  e7f0              B        |L1.32|
                  |L1.62|
00003e  6921              LDR      r1,[r4,#0x10]         ;103
000040  0709              LSLS     r1,r1,#28             ;103
000042  d501              BPL      |L1.72|
000044  4807              LDR      r0,|L1.100|
000046  e7eb              B        |L1.32|
                  |L1.72|
000048  6821              LDR      r1,[r4,#0]            ;111
00004a  0489              LSLS     r1,r1,#18             ;111
00004c  d5e8              BPL      |L1.32|
00004e  4806              LDR      r0,|L1.104|
000050  e7e6              B        |L1.32|
;;;124    
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      0x50000200
                  |L1.88|
                          DCD      0x00b71b00
                  |L1.92|
                          DCD      0x003d0900
                  |L1.96|
                          DCD      0x00002710
                  |L1.100|
                          DCD      0x02255100
                  |L1.104|
                          DCD      0x00f42400

                          AREA ||i.SysGet_PLLClockFreq||, CODE, READONLY, ALIGN=2

                  SysGet_PLLClockFreq PROC
;;;26       */
;;;27     uint32_t SysGet_PLLClockFreq(void)
000000  b510              PUSH     {r4,lr}
;;;28     {
;;;29         uint32_t u32Freq =0, u32PLLSrc;
;;;30         uint32_t u32SRC_N,u32PLL_M,u32PllReg;
;;;31     
;;;32         u32PllReg = CLK->PLLCTL;
000002  4b10              LDR      r3,|L2.68|
000004  6a5a              LDR      r2,[r3,#0x24]
;;;33     
;;;34         if (u32PllReg & CLK_PLLCTL_PD)
000006  03d0              LSLS     r0,r2,#15
000008  d501              BPL      |L2.14|
;;;35             return 0;    /* PLL is in power down mode */
00000a  2000              MOVS     r0,#0
;;;36     
;;;37         if((u32PllReg & CLK_PLLCTL_PLLSRC_Msk) == CLK_PLLCTL_PLL_SRC_HXT)
;;;38         {
;;;39             u32PLLSrc = __HXT;
;;;40         }
;;;41         else if((u32PllReg & CLK_PLLCTL_PLLSRC_Msk) == CLK_PLLCTL_PLL_SRC_HIRC)
;;;42         {
;;;43             /* HIRC Source Selection */
;;;44             if(CLK->CLKSEL0 & CLK_CLKSEL0_HIRCSEL_Msk)
;;;45             {
;;;46                 /* Clock source from HIRC1 (36MHz) */
;;;47                 u32PLLSrc =__HIRC36M;
;;;48             }
;;;49             else
;;;50             {
;;;51                 /* Clock source from HIRC0 (12MHz) */
;;;52                 if(CLK->PWRCTL & CLK_PWRCTL_HIRC0FSEL_Msk)
;;;53                     u32PLLSrc =__HIRC16M;
;;;54                 else
;;;55                     u32PLLSrc =__HIRC12M;
;;;56             }
;;;57         }
;;;58         else
;;;59         {
;;;60             u32PLLSrc =__MIRC;
;;;61         }
;;;62     
;;;63         u32SRC_N = (u32PllReg & CLK_PLLCTL_INDIV_Msk) >> CLK_PLLCTL_INDIV_Pos;
;;;64         u32PLL_M = (u32PllReg & CLK_PLLCTL_PLLMLP_Msk) >> CLK_PLLCTL_PLLMLP_Pos;
;;;65     
;;;66         u32Freq = u32PLLSrc * u32PLL_M / (u32SRC_N+1);
;;;67     
;;;68         return u32Freq;
;;;69     }
00000c  bd10              POP      {r4,pc}
                  |L2.14|
00000e  0351              LSLS     r1,r2,#13             ;37
000010  480d              LDR      r0,|L2.72|
000012  0f8c              LSRS     r4,r1,#30             ;37
000014  d003              BEQ      |L2.30|
000016  0f89              LSRS     r1,r1,#30             ;41
000018  2901              CMP      r1,#1                 ;41
00001a  d009              BEQ      |L2.48|
00001c  480b              LDR      r0,|L2.76|
                  |L2.30|
00001e  0491              LSLS     r1,r2,#18             ;63
000020  0692              LSLS     r2,r2,#26             ;64
000022  0e89              LSRS     r1,r1,#26             ;63
000024  0e92              LSRS     r2,r2,#26             ;64
000026  4350              MULS     r0,r2,r0              ;66
000028  1c49              ADDS     r1,r1,#1              ;66
00002a  f7fffffe          BL       __aeabi_uidivmod
00002e  bd10              POP      {r4,pc}
                  |L2.48|
000030  6919              LDR      r1,[r3,#0x10]         ;44
000032  0709              LSLS     r1,r1,#28             ;44
000034  d501              BPL      |L2.58|
000036  4806              LDR      r0,|L2.80|
000038  e7f1              B        |L2.30|
                  |L2.58|
00003a  6819              LDR      r1,[r3,#0]            ;52
00003c  0489              LSLS     r1,r1,#18             ;52
00003e  d5ee              BPL      |L2.30|
000040  4804              LDR      r0,|L2.84|
000042  e7ec              B        |L2.30|
;;;70     
                          ENDP

                  |L2.68|
                          DCD      0x50000200
                  |L2.72|
                          DCD      0x00b71b00
                  |L2.76|
                          DCD      0x003d0900
                  |L2.80|
                          DCD      0x02255100
                  |L2.84|
                          DCD      0x00f42400

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;132    
;;;133    void SystemCoreClockUpdate (void)
000000  b510              PUSH     {r4,lr}
;;;134    {
;;;135    
;;;136        SystemCoreClock = SysGet_HCLKFreq();
000002  f7fffffe          BL       SysGet_HCLKFreq
000006  4c04              LDR      r4,|L3.24|
;;;137        CyclesPerUs = (SystemCoreClock + 500000) / 1000000;
000008  4904              LDR      r1,|L3.28|
00000a  6020              STR      r0,[r4,#0]  ; SystemCoreClock
00000c  104a              ASRS     r2,r1,#1
00000e  1880              ADDS     r0,r0,r2
000010  f7fffffe          BL       __aeabi_uidivmod
000014  6060              STR      r0,[r4,#4]  ; CyclesPerUs
;;;138    }
000016  bd10              POP      {r4,pc}
;;;139    
                          ENDP

                  |L3.24|
                          DCD      ||.data||
                  |L3.28|
                          DCD      0x000f4240

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;146     */
;;;147    void SystemInit (void)
000000  480a              LDR      r0,|L4.44|
;;;148    {
;;;149    
;;;150        CLK->APBCLK |= CLK_APBCLK_RTCCKEN_Msk;
000002  6882              LDR      r2,[r0,#8]
000004  2102              MOVS     r1,#2
000006  430a              ORRS     r2,r2,r1
000008  6082              STR      r2,[r0,#8]
;;;151        RTC->RWEN = RTC_WRITE_KEY;
00000a  4b0a              LDR      r3,|L4.52|
00000c  4a08              LDR      r2,|L4.48|
00000e  605a              STR      r2,[r3,#4]
;;;152        // RTC->MISCCTL = SYS->RPDBCLK will enable PA9 in 32-pin package and do nothing on other packages
;;;153        // Other arithmetic is for adjust LXT gain level.
;;;154        RTC->MISCCTL = ((SYS->RPDBCLK | RTC_MISCCTL_GAINSEL_Msk) & ~0x00FF0000) | 0x00B00000;
000010  4a09              LDR      r2,|L4.56|
000012  6a12              LDR      r2,[r2,#0x20]
000014  23ff              MOVS     r3,#0xff
000016  041b              LSLS     r3,r3,#16
000018  439a              BICS     r2,r2,r3
00001a  4b08              LDR      r3,|L4.60|
00001c  431a              ORRS     r2,r2,r3
00001e  4b08              LDR      r3,|L4.64|
000020  631a              STR      r2,[r3,#0x30]
;;;155        CLK->APBCLK &= ~CLK_APBCLK_RTCCKEN_Msk;
000022  6882              LDR      r2,[r0,#8]
000024  438a              BICS     r2,r2,r1
000026  6082              STR      r2,[r0,#8]
;;;156    }
000028  4770              BX       lr
;;;157    
                          ENDP

00002a  0000              DCW      0x0000
                  |L4.44|
                          DCD      0x50000200
                  |L4.48|
                          DCD      0x0000a965
                  |L4.52|
                          DCD      0x40008000
                  |L4.56|
                          DCD      0x50000100
                  |L4.60|
                          DCD      0x00b03000
                  |L4.64|
                          DCD      0x400081c0

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x00b71b00
                  CyclesPerUs
                          DCD      0x0000000c

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\Device\\Nuvoton\\Nano103\\Source\\system_Nano103.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_system_Nano103_c_5d646a67____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_system_Nano103_c_5d646a67____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_system_Nano103_c_5d646a67____REVSH|
#line 402
|__asm___16_system_Nano103_c_5d646a67____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
