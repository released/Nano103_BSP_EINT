; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\main.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\Nano103\Include -I..\..\..\Library\StdDriver\inc -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 --omf_browse=.\obj\main.crf ..\main.c]
                          THUMB

                          AREA ||i.EINT0_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  EINT0_IRQHandler PROC
;;;45     
;;;46     void EINT0_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;47     {
;;;48         printf("%s \r\n",__FUNCTION__);
000002  4907              LDR      r1,|L1.32|
000004  a007              ADR      r0,|L1.36|
000006  f7fffffe          BL       __2printf
;;;49         if(GPIO_GET_INT_FLAG(PB, BIT8))
00000a  4808              LDR      r0,|L1.44|
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  05c9              LSLS     r1,r1,#23
000010  d505              BPL      |L1.30|
;;;50         {
;;;51             GPIO_CLR_INT_FLAG(PB, BIT8);
000012  21ff              MOVS     r1,#0xff
000014  3101              ADDS     r1,#1
000016  6201              STR      r1,[r0,#0x20]
;;;52     		printf("PB8 EINT0 occurred. \r\n");
000018  a005              ADR      r0,|L1.48|
00001a  f7fffffe          BL       __2printf
                  |L1.30|
;;;53         }
;;;54     
;;;55     	
;;;56     }
00001e  bd10              POP      {r4,pc}
;;;57     
                          ENDP

                  |L1.32|
                          DCD      ||.constdata||+0x11
                  |L1.36|
000024  2573200d          DCB      "%s \r\n",0
000028  0a00    
00002a  00                DCB      0
00002b  00                DCB      0
                  |L1.44|
                          DCD      0x50004040
                  |L1.48|
000030  50423820          DCB      "PB8 EINT0 occurred. \r\n",0
000034  45494e54
000038  30206f63
00003c  63757272
000040  65642e20
000044  0d0a00  
000047  00                DCB      0

                          AREA ||i.GPABC_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_s
                          REQUIRE _printf_str
                  GPABC_IRQHandler PROC
;;;20     
;;;21     void GPABC_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;22     {
;;;23     
;;;24         uint32_t reg;
;;;25     	
;;;26         printf("%s \r\n",__FUNCTION__);
000002  490d              LDR      r1,|L2.56|
000004  a00d              ADR      r0,|L2.60|
000006  f7fffffe          BL       __2printf
;;;27         if (PB->INTSRC & BIT8)
00000a  480e              LDR      r0,|L2.68|
00000c  6a01              LDR      r1,[r0,#0x20]
00000e  05c9              LSLS     r1,r1,#23
000010  d504              BPL      |L2.28|
;;;28         {
;;;29             PB->INTSRC = BIT8;
000012  21ff              MOVS     r1,#0xff
000014  3101              ADDS     r1,#1
000016  6201              STR      r1,[r0,#0x20]
;;;30             printf("PB.8 GPIO INT occurred. \n");
000018  a00b              ADR      r0,|L2.72|
00001a  e00a              B        |L2.50|
                  |L2.28|
;;;31         }
;;;32         else
;;;33         {    /* Unexpected interrupt. Just clear all PORTA, PORTB, PORTC interrupts */
;;;34             /* Un-expected interrupt. Just clear all PORTA, PORTB, PORTC interrupts */
;;;35             reg = PA->INTSRC;
00001c  4a09              LDR      r2,|L2.68|
00001e  3a40              SUBS     r2,r2,#0x40
000020  6a11              LDR      r1,[r2,#0x20]
;;;36             PA->INTSRC = reg;
000022  6211              STR      r1,[r2,#0x20]
;;;37             reg = PB->INTSRC;
000024  6a01              LDR      r1,[r0,#0x20]
;;;38             PB->INTSRC = reg;
000026  6201              STR      r1,[r0,#0x20]
;;;39             reg = PC->INTSRC;
000028  4906              LDR      r1,|L2.68|
00002a  3140              ADDS     r1,r1,#0x40
00002c  6a08              LDR      r0,[r1,#0x20]
;;;40             PC->INTSRC = reg;
00002e  6208              STR      r0,[r1,#0x20]
;;;41             printf("Unexpected interrupts. \n");
000030  a00c              ADR      r0,|L2.100|
                  |L2.50|
000032  f7fffffe          BL       __2printf
;;;42         }
;;;43     }
000036  bd10              POP      {r4,pc}
;;;44     
                          ENDP

                  |L2.56|
                          DCD      ||.constdata||
                  |L2.60|
00003c  2573200d          DCB      "%s \r\n",0
000040  0a00    
000042  00                DCB      0
000043  00                DCB      0
                  |L2.68|
                          DCD      0x50004040
                  |L2.72|
000048  50422e38          DCB      "PB.8 GPIO INT occurred. \n",0
00004c  20475049
000050  4f20494e
000054  54206f63
000058  63757272
00005c  65642e20
000060  0a00    
000062  00                DCB      0
000063  00                DCB      0
                  |L2.100|
000064  556e6578          DCB      "Unexpected interrupts. \n",0
000068  70656374
00006c  65642069
000070  6e746572
000074  72757074
000078  732e200a
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0

                          AREA ||i.GPIO_Config||, CODE, READONLY, ALIGN=2

                  GPIO_Config PROC
;;;59     
;;;60     void GPIO_Config(void)
000000  b570              PUSH     {r4-r6,lr}
;;;61     {
;;;62     
;;;63     
;;;64     	#if defined (USE_GPIO_OUTPUT)
;;;65         GPIO_SetMode(PB, BIT8, GPIO_PMD_OUTPUT);
;;;66     	#endif
;;;67     
;;;68     	#if defined (USE_GPIO_INPUT)	
;;;69         GPIO_SetMode(PB, BIT8, GPIO_PMD_INPUT);
;;;70     	#endif
;;;71     
;;;72     	#if defined (USE_EINT0_IRQ)		
;;;73         GPIO_SetMode(PB, BIT8, GPIO_PMD_INPUT);	
000002  25ff              MOVS     r5,#0xff
000004  4c0a              LDR      r4,|L3.48|
000006  3501              ADDS     r5,#1
000008  2200              MOVS     r2,#0
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       GPIO_SetMode
;;;74     	
;;;75         GPIO_EnableEINT0(PB, 8, GPIO_INT_FALLING);
000012  2201              MOVS     r2,#1
000014  2108              MOVS     r1,#8
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       GPIO_EnableInt
00001c  4905              LDR      r1,|L3.52|
00001e  2004              MOVS     r0,#4
000020  6008              STR      r0,[r1,#0]
;;;76         NVIC_EnableIRQ(EINT0_IRQn);
;;;77     	
;;;78         GPIO_SET_DEBOUNCE_TIME(GPIO_DBCLKSRC_IRC10K, GPIO_DBCLKSEL_1024);	
000022  4905              LDR      r1,|L3.56|
000024  203a              MOVS     r0,#0x3a
000026  6008              STR      r0,[r1,#0]
;;;79         GPIO_ENABLE_DEBOUNCE(PB, BIT8);
000028  6962              LDR      r2,[r4,#0x14]
00002a  432a              ORRS     r2,r2,r5
00002c  6162              STR      r2,[r4,#0x14]
;;;80     	#endif
;;;81     
;;;82     	#if defined (USE_GPIO_IRQ)		
;;;83         GPIO_SetMode(PB, BIT8, GPIO_PMD_INPUT);	
;;;84     	
;;;85         GPIO_EnableInt(PB, 8, GPIO_INT_FALLING);
;;;86         NVIC_EnableIRQ(GPABC_IRQn);
;;;87     	
;;;88         GPIO_SET_DEBOUNCE_TIME(GPIO_DBCLKSRC_HCLK, GPIO_DBCLKSEL_1);	
;;;89         GPIO_ENABLE_DEBOUNCE(PB, BIT8);
;;;90     	#endif
;;;91     
;;;92     }
00002e  bd70              POP      {r4-r6,pc}
;;;93     
                          ENDP

                  |L3.48|
                          DCD      0x50004040
                  |L3.52|
                          DCD      0xe000e100
                  |L3.56|
                          DCD      0x50004180

                          AREA ||i.SYS_Init||, CODE, READONLY, ALIGN=2

                  SYS_Init PROC
;;;146    
;;;147    void SYS_Init(void)
000000  b570              PUSH     {r4-r6,lr}
000002  2059              MOVS     r0,#0x59
000004  2216              MOVS     r2,#0x16
000006  4c21              LDR      r4,|L4.140|
000008  2188              MOVS     r1,#0x88
00000a  e002              B        |L4.18|
                  |L4.12|
00000c  6020              STR      r0,[r4,#0]
00000e  6022              STR      r2,[r4,#0]
000010  6021              STR      r1,[r4,#0]
                  |L4.18|
000012  6823              LDR      r3,[r4,#0]
000014  2b01              CMP      r3,#1
000016  d1f9              BNE      |L4.12|
;;;148    {
;;;149        /*---------------------------------------------------------------------------------------------------------*/
;;;150        /* Init System Clock                                                                                       */
;;;151        /*---------------------------------------------------------------------------------------------------------*/
;;;152        /* Unlock protected registers */
;;;153        SYS_UnlockReg();
;;;154    
;;;155        /* Enable External XTAL (4~24 MHz) */
;;;156        CLK_EnableXtalRC(CLK_PWRCTL_HIRC0EN_Msk);
000018  2004              MOVS     r0,#4
00001a  f7fffffe          BL       CLK_EnableXtalRC
;;;157        CLK_EnableXtalRC(CLK_PWRCTL_LIRCEN_Msk);
00001e  2008              MOVS     r0,#8
000020  f7fffffe          BL       CLK_EnableXtalRC
;;;158    	
;;;159        /* Waiting for 12MHz clock ready */
;;;160        CLK_WaitClockReady(CLK_STATUS_HIRC0STB_Msk);
000024  2010              MOVS     r0,#0x10
000026  f7fffffe          BL       CLK_WaitClockReady
;;;161        CLK_WaitClockReady(CLK_STATUS_LIRCSTB_Msk);	
00002a  2008              MOVS     r0,#8
00002c  f7fffffe          BL       CLK_WaitClockReady
;;;162    	
;;;163        /* Switch HCLK clock source to HXT */
;;;164        CLK_SetHCLK(CLK_CLKSEL0_HCLKSEL_HIRC0,CLK_HCLK_CLK_DIVIDER(1));
000030  2100              MOVS     r1,#0
000032  2004              MOVS     r0,#4
000034  f7fffffe          BL       CLK_SetHCLK
;;;165    
;;;166        CLK_EnableModuleClock(TMR3_MODULE);	
000038  4d15              LDR      r5,|L4.144|
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       CLK_EnableModuleClock
;;;167        CLK_SetModuleClock(TMR3_MODULE, CLK_CLKSEL2_TMR3SEL_HIRC, 0);
000040  2101              MOVS     r1,#1
000042  2200              MOVS     r2,#0
000044  0389              LSLS     r1,r1,#14
000046  4628              MOV      r0,r5
000048  f7fffffe          BL       CLK_SetModuleClock
;;;168    
;;;169        /* Enable UART clock */
;;;170        CLK_EnableModuleClock(UART0_MODULE);
00004c  4d11              LDR      r5,|L4.148|
00004e  4628              MOV      r0,r5
000050  f7fffffe          BL       CLK_EnableModuleClock
;;;171    
;;;172        /* Select UART clock source from HXT */
;;;173        CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART0SEL_HIRC, CLK_UART0_CLK_DIVIDER(1));
000054  2200              MOVS     r2,#0
000056  2103              MOVS     r1,#3
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       CLK_SetModuleClock
;;;174    
;;;175        /* Update System Core Clock */
;;;176        /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock. */
;;;177        SystemCoreClockUpdate();
00005e  f7fffffe          BL       SystemCoreClockUpdate
;;;178    
;;;179    
;;;180        /*---------------------------------------------------------------------------------------------------------*/
;;;181        /* Init I/O Multi-function                                                                                 */
;;;182        /*---------------------------------------------------------------------------------------------------------*/
;;;183        /* Set GPB multi-function pins for UART0 RXD and TXD */
;;;184        SYS->GPB_MFPL &= ~(SYS_GPB_MFPL_PB0MFP_Msk | SYS_GPB_MFPL_PB1MFP_Msk);
000062  2005              MOVS     r0,#5
000064  0700              LSLS     r0,r0,#28
000066  6b81              LDR      r1,[r0,#0x38]
000068  0a09              LSRS     r1,r1,#8
00006a  0209              LSLS     r1,r1,#8
00006c  6381              STR      r1,[r0,#0x38]
;;;185        SYS->GPB_MFPL |= (SYS_GPB_MFPL_PB0MFP_UART0_RXD | SYS_GPB_MFPL_PB1MFP_UART0_TXD);
00006e  6b81              LDR      r1,[r0,#0x38]
000070  2211              MOVS     r2,#0x11
000072  4311              ORRS     r1,r1,r2
000074  6381              STR      r1,[r0,#0x38]
;;;186    
;;;187    	#if defined (USE_EINT0_IRQ)
;;;188        SYS->GPB_MFPH &= ~( SYS_GPB_MFPH_PB8MFP_Msk );
000076  6bc1              LDR      r1,[r0,#0x3c]
000078  0909              LSRS     r1,r1,#4
00007a  0109              LSLS     r1,r1,#4
00007c  63c1              STR      r1,[r0,#0x3c]
;;;189        SYS->GPB_MFPH |= (SYS_GPB_MFPH_PB8MFP_INT0);
00007e  6bc1              LDR      r1,[r0,#0x3c]
000080  2203              MOVS     r2,#3
000082  4311              ORRS     r1,r1,r2
000084  63c1              STR      r1,[r0,#0x3c]
000086  2000              MOVS     r0,#0
000088  6020              STR      r0,[r4,#0]
;;;190    	#endif
;;;191    	
;;;192        /* Lock protected registers */
;;;193        SYS_LockReg();
;;;194    }
00008a  bd70              POP      {r4-r6,pc}
;;;195    
                          ENDP

                  |L4.140|
                          DCD      0x50000100
                  |L4.144|
                          DCD      0xcec43e85
                  |L4.148|
                          DCD      0xae003d10

                          AREA ||i.TIMER3_Init||, CODE, READONLY, ALIGN=2

                  TIMER3_Init PROC
;;;118    
;;;119    void TIMER3_Init(void)
000000  b510              PUSH     {r4,lr}
;;;120    {
;;;121        TIMER_Open(TIMER3, TIMER_PERIODIC_MODE, 1000);
000002  4c09              LDR      r4,|L5.40|
000004  227d              MOVS     r2,#0x7d
000006  00d2              LSLS     r2,r2,#3
000008  2110              MOVS     r1,#0x10
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       TIMER_Open
000010  68e1              LDR      r1,[r4,#0xc]
000012  2001              MOVS     r0,#1
000014  4301              ORRS     r1,r1,r0
000016  60e1              STR      r1,[r4,#0xc]
000018  4a04              LDR      r2,|L5.44|
00001a  02c1              LSLS     r1,r0,#11
00001c  6011              STR      r1,[r2,#0]
00001e  6821              LDR      r1,[r4,#0]
000020  4301              ORRS     r1,r1,r0
000022  6021              STR      r1,[r4,#0]
;;;122        TIMER_EnableInt(TIMER3);
;;;123        NVIC_EnableIRQ(TMR3_IRQn);	
;;;124        TIMER_Start(TIMER3);
;;;125    }
000024  bd10              POP      {r4,pc}
;;;126    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      0x40110100
                  |L5.44|
                          DCD      0xe000e100

                          AREA ||i.TMR3_IRQHandler||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_str
                  TMR3_IRQHandler PROC
;;;94     
;;;95     void TMR3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
000002  480c              LDR      r0,|L6.52|
000004  6901              LDR      r1,[r0,#0x10]
000006  07c9              LSLS     r1,r1,#31
000008  0fc9              LSRS     r1,r1,#31
;;;96     {
00000a  d012              BEQ      |L6.50|
00000c  2101              MOVS     r1,#1
00000e  6101              STR      r1,[r0,#0x10]
;;;97     	static uint32_t LOG = 0;
;;;98     	static uint16_t CNT = 0;
;;;99     	
;;;100        if(TIMER_GetIntFlag(TIMER3) == 1)
;;;101        {
;;;102            TIMER_ClearIntFlag(TIMER3);
;;;103    	
;;;104    		if (CNT++ >= 1000)
000010  4909              LDR      r1,|L6.56|
000012  8808              LDRH     r0,[r1,#0]  ; CNT
000014  1c42              ADDS     r2,r0,#1
000016  800a              STRH     r2,[r1,#0]
000018  227d              MOVS     r2,#0x7d
00001a  00d2              LSLS     r2,r2,#3
00001c  4290              CMP      r0,r2
00001e  d308              BCC      |L6.50|
;;;105    		{		
;;;106    			CNT = 0;
000020  2000              MOVS     r0,#0
000022  8008              STRH     r0,[r1,#0]
;;;107            	printf("%s : %4d\r\n",__FUNCTION__,LOG++);
000024  684a              LDR      r2,[r1,#4]  ; LOG
000026  1c50              ADDS     r0,r2,#1
000028  6048              STR      r0,[r1,#4]  ; LOG
00002a  4904              LDR      r1,|L6.60|
00002c  a004              ADR      r0,|L6.64|
00002e  f7fffffe          BL       __2printf
                  |L6.50|
;;;108    
;;;109    			#if defined (USE_GPIO_OUTPUT)
;;;110    			PB8 ^= 1;
;;;111    			#endif	
;;;112    			
;;;113    		}		
;;;114        }
;;;115    }
000032  bd10              POP      {r4,pc}
;;;116    
                          ENDP

                  |L6.52|
                          DCD      0x40110100
                  |L6.56|
                          DCD      ||.data||
                  |L6.60|
                          DCD      ||.constdata||+0x22
                  |L6.64|
000040  2573203a          DCB      "%s : %4d\r\n",0
000044  20253464
000048  0d0a00  
00004b  00                DCB      0

                          AREA ||i.UART0_Init||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  UART0_Init PROC
;;;128    
;;;129    void UART0_Init(void)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131        SYS_ResetModule(UART0_RST);
000002  481b              LDR      r0,|L7.112|
000004  f7fffffe          BL       SYS_ResetModule
;;;132    
;;;133        /* Configure UART0 and set UART0 baud rate */
;;;134        UART_Open(UART0, 115200);
000008  21e1              MOVS     r1,#0xe1
00000a  0249              LSLS     r1,r1,#9
00000c  4819              LDR      r0,|L7.116|
00000e  f7fffffe          BL       UART_Open
;;;135    
;;;136    	printf("\r\nCLK_GetCPUFreq : %8d\r\n",CLK_GetCPUFreq());
000012  f7fffffe          BL       CLK_GetCPUFreq
000016  4601              MOV      r1,r0
000018  a017              ADR      r0,|L7.120|
00001a  f7fffffe          BL       __2printf
;;;137    	printf("CLK_GetHXTFreq : %8d\r\n",CLK_GetHXTFreq());
00001e  f7fffffe          BL       CLK_GetHXTFreq
000022  4601              MOV      r1,r0
000024  a01b              ADR      r0,|L7.148|
000026  f7fffffe          BL       __2printf
;;;138    	printf("CLK_GetLXTFreq : %8d\r\n",CLK_GetLXTFreq());	
00002a  f7fffffe          BL       CLK_GetLXTFreq
00002e  4601              MOV      r1,r0
000030  a01e              ADR      r0,|L7.172|
000032  f7fffffe          BL       __2printf
;;;139    	printf("CLK_GetPCLK0Freq : %8d\r\n",CLK_GetHCLKFreq());
000036  f7fffffe          BL       CLK_GetHCLKFreq
00003a  4601              MOV      r1,r0
00003c  a021              ADR      r0,|L7.196|
00003e  f7fffffe          BL       __2printf
;;;140    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPLLClockFreq());
000042  f7fffffe          BL       CLK_GetPLLClockFreq
000046  4601              MOV      r1,r0
000048  a025              ADR      r0,|L7.224|
00004a  f7fffffe          BL       __2printf
;;;141    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK0Freq());
00004e  f7fffffe          BL       CLK_GetPCLK0Freq
000052  4601              MOV      r1,r0
000054  a022              ADR      r0,|L7.224|
000056  f7fffffe          BL       __2printf
;;;142    	printf("CLK_GetPCLK1Freq : %8d\r\n",CLK_GetPCLK1Freq());
00005a  f7fffffe          BL       CLK_GetPCLK1Freq
00005e  4601              MOV      r1,r0
000060  a01f              ADR      r0,|L7.224|
000062  f7fffffe          BL       __2printf
;;;143    	printf("\r\n\r\n");
000066  a025              ADR      r0,|L7.252|
000068  f7fffffe          BL       __2printf
;;;144    }
00006c  bd10              POP      {r4,pc}
;;;145    
                          ENDP

00006e  0000              DCW      0x0000
                  |L7.112|
                          DCD      0x04000010
                  |L7.116|
                          DCD      0x40050000
                  |L7.120|
000078  0d0a434c          DCB      "\r\nCLK_GetCPUFreq : %8d\r\n",0
00007c  4b5f4765
000080  74435055
000084  46726571
000088  203a2025
00008c  38640d0a
000090  00      
000091  00                DCB      0
000092  00                DCB      0
000093  00                DCB      0
                  |L7.148|
000094  434c4b5f          DCB      "CLK_GetHXTFreq : %8d\r\n",0
000098  47657448
00009c  58544672
0000a0  6571203a
0000a4  20253864
0000a8  0d0a00  
0000ab  00                DCB      0
                  |L7.172|
0000ac  434c4b5f          DCB      "CLK_GetLXTFreq : %8d\r\n",0
0000b0  4765744c
0000b4  58544672
0000b8  6571203a
0000bc  20253864
0000c0  0d0a00  
0000c3  00                DCB      0
                  |L7.196|
0000c4  434c4b5f          DCB      "CLK_GetPCLK0Freq : %8d\r\n",0
0000c8  47657450
0000cc  434c4b30
0000d0  46726571
0000d4  203a2025
0000d8  38640d0a
0000dc  00      
0000dd  00                DCB      0
0000de  00                DCB      0
0000df  00                DCB      0
                  |L7.224|
0000e0  434c4b5f          DCB      "CLK_GetPCLK1Freq : %8d\r\n",0
0000e4  47657450
0000e8  434c4b31
0000ec  46726571
0000f0  203a2025
0000f4  38640d0a
0000f8  00      
0000f9  00                DCB      0
0000fa  00                DCB      0
0000fb  00                DCB      0
                  |L7.252|
0000fc  0d0a0d0a          DCB      "\r\n\r\n",0
000100  00      
000101  00                DCB      0
000102  00                DCB      0
000103  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;203    
;;;204    int main()
000000  f7fffffe          BL       SYS_Init
;;;205    {
;;;206    
;;;207        SYS_Init();
;;;208    
;;;209        UART0_Init();
000004  f7fffffe          BL       UART0_Init
;;;210    	TIMER3_Init();
000008  f7fffffe          BL       TIMER3_Init
;;;211    
;;;212    	GPIO_Config();
00000c  f7fffffe          BL       GPIO_Config
                  |L8.16|
;;;213    
;;;214    
;;;215        /* Got no where to go, just loop forever */
;;;216        while(1)
000010  e7fe              B        |L8.16|
;;;217        {
;;;218    //		#if defined (USE_GPIO_INPUT)
;;;219    //		if (PB8)
;;;220    //		{
;;;221    //			printf("input toggle\r\n");
;;;222    //		}
;;;223    //		#endif
;;;224    
;;;225        }
;;;226    
;;;227    }
;;;228    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  __FUNCTION__
000000  47504142          DCB      0x47,0x50,0x41,0x42
000004  435f4952          DCB      0x43,0x5f,0x49,0x52
000008  5148616e          DCB      0x51,0x48,0x61,0x6e
00000c  646c6572          DCB      0x64,0x6c,0x65,0x72
000010  00                DCB      0x00
                  |symbol_number.29|
000011  45494e            DCB      0x45,0x49,0x4e
000014  54305f49          DCB      0x54,0x30,0x5f,0x49
000018  52514861          DCB      0x52,0x51,0x48,0x61
00001c  6e646c65          DCB      0x6e,0x64,0x6c,0x65
000020  7200              DCB      0x72,0x00
                  |symbol_number.30|
000022  544d              DCB      0x54,0x4d
000024  52335f49          DCB      0x52,0x33,0x5f,0x49
000028  52514861          DCB      0x52,0x51,0x48,0x61
00002c  6e646c65          DCB      0x6e,0x64,0x6c,0x65
000030  7200              DCB      0x72,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  ||CNT||
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  LOG
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_7ab89a80____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___6_main_c_7ab89a80____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_7ab89a80____REVSH|
#line 402
|__asm___6_main_c_7ab89a80____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
